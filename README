I've seen many different ways of doing a timed poll (incrementing for loops,
decrementing for loops, while loops, do loops, etc.), so I thought there might
be some benefit to doing these timed polls in a common way. I came up with a
timed_poll() function that I thought worked well.

/*
 * timed_poll() polls a condition, and if that condition has not occurred,
 * repeats the poll after a specified time delay up to a specified number
 * of delays.
 *
 * timed_poll() returns a boolean:
 * true if the condition occurred.
 * false if the maximum delay was reached before the condition occurred.
 *
 * timed_poll() takes four arguments:
 * 1) a pointer to a function that takes no arguments and returns a boolean
 * true if the condition being polled has occurred, or false if not.
 * 2) the maximum number of repeats between polls before timed_poll returns
 * a boolean false (Note the number of polls taken will be one greater than
 * the number of repeats since an initial poll is taken before the first delay),
 * 3) a pointer to a delay function that takes an argument for units of delay,
 * 4) the units of time delay duration between polls in units per delay.
 *
 * timed_poll() returns a boolean:
 * true if the condition occurred
 * false if the maximum delay was reached before the condition occurred.
 *
 * Example declarations:
 *
 * extern bool timed_poll(bool (*condtion_check)(void), uint32_t repeats,
 *      void (*delay_function)(uint32_t), uint32_t delay_duration);
 *
 * bool timed_poll(bool (*)(void), unsigned, int (*)(useconds_t), useconds_t);

The file timed_poll.c contains some example code showing how I envision
implementing this function.
